// Copyright Y56380X https://github.com/Y56380X/RESTly.
// Licensed under the MIT License.

using Microsoft.OpenApi.Models;
using Microsoft.OpenApi.Models.Interfaces;
using Restly.Models;

namespace Restly.CodeResolvers;

internal sealed class ClientInterfaceResolver : CodeResolverBase
{
	private readonly OpenApiDocument		  _apiSpecification;
	private readonly List<EndpointDefinition> _generatedMethodDefinitions;

	public ClientInterfaceResolver(OpenApiDocument apiSpecification, List<EndpointDefinition> generatedMethodDefinitions)
	{
		_apiSpecification = apiSpecification;
		_generatedMethodDefinitions = generatedMethodDefinitions;
	}
	
	protected override string Resolve()
	{
		var clientClassName = _apiSpecification.Info.Title?.Split('.').Last().NormalizeCsName();

		// Generate request and response models code
		var modelsCode = (_apiSpecification.Components?.Schemas ?? new Dictionary<string, IOpenApiSchema>())
			.Select(schema => new ComponentCodeResolver(_apiSpecification, schema.Key, schema.Value))
			.Select(mcr => mcr.GeneratedCode)
			.ToArray();
		
		// Generate endpoint call methods and XML description
		var endpointCode = _generatedMethodDefinitions
			.Select(Resolve)
			.ToArray();
		
		var clientCodeBuilder = new CodeStringBuilder(
			$$"""
			// <auto-generated/>
			// Copyright Y56380X https://github.com/Y56380X/RESTly.
			// Licensed under the MIT License.

			using System;
			using System.Linq;
			using System.Net.Http;
			using System.Net.Http.Json;
			using System.Text.Json;
			using System.Text.Json.Serialization;
			using System.Threading;
			using System.Threading.Tasks;
			using System.Web;

			#nullable enable

			namespace Restly;

			public interface I{{clientClassName}}
			""");
		
		clientCodeBuilder
			.AppendLine()
			.AppendLine("{")
			.PushIndent();

		foreach (var (endpointCodeLines, i) in endpointCode.Select((ls, i) => (ls, i)))
		{
			if (i > 0) clientCodeBuilder.AppendLine();
			clientCodeBuilder.AppendLines(endpointCodeLines);
		}

		clientCodeBuilder
			.AppendLine()
			.AppendLine(string.Join("\n\n", modelsCode))
			.PopIndent()
			.AppendLine("}");
		
		return clientCodeBuilder.ToString();
	}

	private static string[] Resolve(EndpointDefinition endpointDefinition)
	{
		var methodDeclaration = endpointDefinition.MethodDeclaration.Replace(" async ", " ");
		
		var operation = endpointDefinition.SpecOperation;
		if (operation.Summary == null || string.IsNullOrWhiteSpace(operation.Summary))
			return [methodDeclaration];
		
		var lines = new List<string>();
		var operationSummary = operation.Summary.EndsWith(".") 
			? operation.Summary 
			: $"{operation.Summary}.";
		var summaryLines = operationSummary
			.Split(['\n'], StringSplitOptions.RemoveEmptyEntries)
			.Select(p => p.Trim())
			.Select(summaryPart => $"///\t{summaryPart}");
		
		lines.Add("/// <summary>");
		lines.AddRange(summaryLines);
		lines.Add("/// </summary>");
		lines.Add(methodDeclaration);
		
		return lines.ToArray();
	}
}