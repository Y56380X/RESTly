// Copyright Y56380X https://github.com/Y56380X/RESTly.
// Licensed under the MIT License.

using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Microsoft.OpenApi.Models;
using Microsoft.OpenApi.Readers;

namespace Restly;

[Generator]
public class ApiClientSourceGenerator : IIncrementalGenerator
{
	private static readonly IDictionary<OperationType, string> HttpMethodMapping =
		new Dictionary<OperationType, string>
		{
			{ OperationType.Head, "HttpMethod.Head" }
		};
	
	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		// collect RESTly client attributes and possible files for OpenApi specifications
		var generationBase = context.CompilationProvider
			.Select((c, _) => c.Assembly)
			.SelectMany((s, _) => s.GetAttributes()
				.Where(a => a.AttributeClass?.Name.Equals("RestlyClientAttribute") ?? false))
			.Collect()
			.Combine(context.AdditionalTextsProvider.Where(a => a.Path.EndsWith(".json") || a.Path.EndsWith(".yml") || a.Path.EndsWith(".yaml")).Collect());
		
		context.RegisterSourceOutput(generationBase, Generator);
	}

	private static void Generator(SourceProductionContext context, (ImmutableArray<AttributeData>, ImmutableArray<AdditionalText>) generationBase)
	{
		var (attributes, additionalTexts) = (generationBase.Item1, generationBase.Item2);

		// Generate API client code based on the given definition file names of the assembly attributes
		var clientDefinitions = attributes.Select(a => 
			(a.ConstructorArguments[0].Value as string, a.ConstructorArguments[1].Value as string));
		foreach (var (clientDefinition, clientName) in clientDefinitions)
		{
			if (string.IsNullOrWhiteSpace(clientDefinition) || string.IsNullOrWhiteSpace(clientName))
				return; // todo: write analyzer message

			var definitionFile = additionalTexts.SingleOrDefault(a => a.Path.EndsWith(clientDefinition));
			if (definitionFile == null)
				return; // todo: write analyzer message

			var definitionContent = definitionFile.GetText()!.ToString();
			var openApiReader = new OpenApiStringReader(new OpenApiReaderSettings
			{
				ReferenceResolution = ReferenceResolutionSetting.ResolveLocalReferences,
				LoadExternalRefs = false
			});
			var apiSpecification = openApiReader.Read(definitionContent, out _);
			apiSpecification.Info.Title = clientName;
			var apiClientCode = GenerateApiClientCode(apiSpecification);
			context.AddSource($"{clientName}.g.cs", SourceText.From(apiClientCode, Encoding.UTF8));
		}
	}

	private static string GenerateApiClientCode(OpenApiDocument apiSpecification)
	{
		// Generate request and response models code
		var modelsCode = apiSpecification.Components.Schemas
			.Select(schema => GenerateModelCode(schema.Key, schema.Value));

		// Generate REST call methods for API client
		var callsCode = apiSpecification.Paths
			.Select(path => GenerateEndpointCode(path.Key, path.Value));
		
		var clientCode =
			$$"""
			  // <auto-generated/>
			  using System.Net.Http;
			  
			  namespace Restly;
			  
			  public class {{apiSpecification.Info.Title}} : IDisposable
			  {
			  {{"\t"}}private readonly HttpClient _httpClient;
			  
			  {{"\t"}}public {{apiSpecification.Info.Title}}(HttpClient httpClient)
			  {{"\t"}}{
			  {{"\t\t"}}_httpClient = httpClient;
			  {{"\t"}}}
			  
			  {{"\t"}}{{string.Join("\n\n\t", callsCode)}}
			  
			  {{"\t"}}public void Dispose()
			  {{"\t"}}{
			  {{"\t\t"}}_httpClient.Dispose();
			  {{"\t"}}}
			  
			  {{"\t"}}{{string.Join("\n\n\t", modelsCode)}}
			  }
			  """;

		return clientCode;
	}

	private static string GenerateModelCode(string modelName, OpenApiSchema schema)
	{
		var modelProperties = schema.Properties
			.Select(PropertyCode);
		return $"public record {modelName.Capitalize()}({string.Join(", ", modelProperties)});";

		string PropertyCode(KeyValuePair<string, OpenApiSchema> property) =>
			$"{property.Value.ToCsType()} {property.Key.Capitalize()}";
	}

	private static string GenerateEndpointCode(string pathTemplate, OpenApiPathItem pathItem)
	{
		var callsCode = pathItem.Operations
			.Select(kvp => GenerateOperationCode(pathTemplate, kvp.Key, kvp.Value))
			.Where(c => c is not null); // filter not generated code for not supported operations
		return string.Join("\n\n\t", callsCode);
	}

	private static string? GenerateOperationCode(string pathTemplate, OperationType operationType, OpenApiOperation operation)
	{
		// Check for operation type support
		if (!HttpMethodMapping.ContainsKey(operationType))
			return null;

		var callsCode = GenerateCallCode(pathTemplate, operationType);
		return callsCode;
	}

	private static string GenerateCallCode(string pathTemplate, OperationType operationType)
	{
		var methodName = GenerateMethodName();
		
		var callCode = 
			$$"""
			  public async Task {{methodName}}()
			  {
			  {{"\t\t"}}throw new System.NotImplementedException();
			  }
			  """;

		throw new NotImplementedException();
		
		return callCode;
		
		string GenerateMethodName()
		{
			var methodFragments = pathTemplate
				.Split([' ', '/', '\\', '-', '_', '.', ':', '{', '}', '(', ')', '[', ']'], StringSplitOptions.RemoveEmptyEntries)
				.Select(f => f.Capitalize());
			return $"{operationType}{string.Concat(methodFragments)}Async"; // todo: generate better methods names (take response and parameters into account)
		}
	}
}